{"version":3,"file":"fds-image-editor-gradient-es.js","sources":["../node_modules/svelte/internal/index.mjs","../node_modules/svelte/store/index.mjs","../src/stores.js","../src/Dialog.svelte","../src/App.svelte"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\nfunction split_css_unit(value) {\n    const split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n    return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];\n}\nconst contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\n/**\n * Resize observer singleton.\n * One listener per element only!\n * https://groups.google.com/a/chromium.org/g/blink-dev/c/z6ienONUb5A/m/F5-VcUZtBAAJ\n */\nclass ResizeObserverSingleton {\n    constructor(options) {\n        this.options = options;\n        this._listeners = 'WeakMap' in globals ? new WeakMap() : undefined;\n    }\n    observe(element, listener) {\n        this._listeners.set(element, listener);\n        this._getObserver().observe(element, this.options);\n        return () => {\n            this._listeners.delete(element);\n            this._observer.unobserve(element); // this line can probably be removed\n        };\n    }\n    _getObserver() {\n        var _a;\n        return (_a = this._observer) !== null && _a !== void 0 ? _a : (this._observer = new ResizeObserver((entries) => {\n            var _a;\n            for (const entry of entries) {\n                ResizeObserverSingleton.entries.set(entry.target, entry);\n                (_a = this._listeners.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\n            }\n        }));\n    }\n}\n// Needs to be written like this to pass the tree-shake-test\nResizeObserverSingleton.entries = 'WeakMap' in globals ? new WeakMap() : undefined;\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction comment(content) {\n    return document.createComment(content);\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_immediate_propagation(fn) {\n    return function (event) {\n        event.stopImmediatePropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nconst always_set_through_set_attribute = ['width', 'height'];\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set && always_set_through_set_attribute.indexOf(key) === -1) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction set_dynamic_element_data(tag) {\n    return (/-/.test(tag)) ? set_custom_element_data_map : set_attributes;\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction init_binding_group(group) {\n    let _inputs;\n    return {\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            _inputs.forEach(input => group.push(input));\n        },\n        /* remove */ r() {\n            _inputs.forEach(input => group.splice(group.indexOf(input), 1));\n        }\n    };\n}\nfunction init_binding_group_dynamic(group, indexes) {\n    let _group = get_binding_group(group);\n    let _inputs;\n    function get_binding_group(group) {\n        for (let i = 0; i < indexes.length; i++) {\n            group = group[indexes[i]] = group[indexes[i]] || [];\n        }\n        return group;\n    }\n    function push() {\n        _inputs.forEach(input => _group.push(input));\n    }\n    function remove() {\n        _inputs.forEach(input => _group.splice(_group.indexOf(input), 1));\n    }\n    return {\n        /* update */ u(new_indexes) {\n            indexes = new_indexes;\n            const new_group = get_binding_group(group);\n            if (new_group !== _group) {\n                remove();\n                _group = new_group;\n                push();\n            }\n        },\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            push();\n        },\n        /* remove */ r: remove\n    };\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction claim_comment(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 8, (node) => {\n        node.data = '' + data;\n        return undefined;\n    }, () => comment(data), true);\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    text.data = data;\n}\nfunction set_data_contenteditable(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable(text, data);\n    }\n    else {\n        set_data(text, data);\n    }\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value == null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value, mounting) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    if (!mounting || value !== undefined) {\n        select.selectedIndex = -1; // no option should be selected\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked');\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_iframe_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n            // see https://github.com/sveltejs/svelte/issues/4233\n            fn();\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nconst resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'content-box' });\nconst resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'border-box' });\nconst resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'device-pixel-content-box' });\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            /** #7364  target for <template> may be provided as #document-fragment(11) */\n            else\n                this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));\n            this.t = target.tagName !== 'TEMPLATE' ? target : target.content;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nlet render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n */\nfunction flush_render_callbacks(fns) {\n    const filtered = [];\n    const targets = [];\n    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));\n    targets.forEach((c) => c());\n    render_callbacks = filtered;\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    const updates = [];\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            // defer updates until all the DOM shuffling is done\n            updates.push(() => block.p(child_ctx, dirty));\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    run_all(updates);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\nconst _boolean_attributes = [\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n];\n/**\n * List of HTML boolean attributes (e.g. `<input disabled>`).\n * Source: https://html.spec.whatwg.org/multipage/indices.html\n */\nconst boolean_attributes = new Set([..._boolean_attributes]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        flush_render_callbacks($$.after_update);\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    if (has_stop_immediate_propagation)\n        modifiers.push('stopImmediatePropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_contenteditable_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable_dev(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable_dev(text, data);\n    }\n    else {\n        set_data_dev(text, data);\n    }\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, ResizeObserverSingleton, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_iframe_resize_listener, add_location, add_render_callback, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_comment, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, comment, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, contenteditable_truthy_values, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, flush_render_callbacks, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, init_binding_group, init_binding_group_dynamic, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, resize_observer_border_box, resize_observer_content_box, resize_observer_device_pixel_content_box, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_contenteditable, set_data_contenteditable_dev, set_data_dev, set_data_maybe_contenteditable, set_data_maybe_contenteditable_dev, set_dynamic_element_data, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, split_css_unit, spread, src_url_equal, start_hydrating, stop_immediate_propagation, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier} [start]\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=} start\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0 && stop) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let started = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (started) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        started = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n            // We need to set this to false because callbacks can still happen despite having unsubscribed:\n            // Callbacks might already be placed in the queue which doesn't know it should no longer\n            // invoke this derived store.\n            started = false;\n        };\n    });\n}\n/**\n * Takes a store and returns a new one derived from the old one that is readable.\n *\n * @param store - store to make readonly\n */\nfunction readonly(store) {\n    return {\n        subscribe: store.subscribe.bind(store)\n    };\n}\n\nexport { derived, readable, readonly, writable };\n","import { writable } from 'svelte/store';\nexport let toollayer = writable({});","<svelte:options tag=\"fds-image-editor-gradient-dialog\"></svelte:options>\n<script>\n    import {get_current_component} from \"svelte/internal\"\n\n\n    import {toollayer as toolback} from \"./stores\";\n    let toollayer\n    if(globalThis.gyre && globalThis.gyre.paletteValues.tools){\n        toollayer = globalThis.gyre.paletteValues.tools.fdsimageeditorgradient;\n    }  else {\n        toollayer =toolback;\n    }\n\n\n    let host = get_current_component().$$.root.host\n    let value = \"\";\n\n    export let toolinst;\n\n    function change(name, value) {\n        host.dispatchEvent(new CustomEvent(\"change\", {detail: {name: name, value: value}}))\n    }\n\n    function changeList(value) {\n        //document.getElementById(\"gradientTool\").value=value\n        $toollayer.value = value.value;\n    }\n\n    function resetLine() {\n        $toollayer.resetLine = true;\n    }\n\n    function hexToRgb(hex) {\n        // Remove the '#' if it is present\n        hex = hex.replace(/^#/, '');\n\n        // If the hex is shorthand like '#fff', expand it to '#ffffff'\n        if (hex.length === 3) {\n            hex = hex.split('').map(char => char + char).join('');\n        }\n\n        // Parse the hex string into RGB values\n        const r = parseInt(hex.substring(0, 2), 16);\n        const g = parseInt(hex.substring(2, 4), 16);\n        const b = parseInt(hex.substring(4, 6), 16);\n\n        return `${r}, ${g}, ${b}`;\n    }\n\n    $: if ($toollayer) {\n        refresh();\n    }\n\n    if (globalThis.gyre && !value) {\n        let start = hexToRgb(globalThis.gyre.paletteValues.foregroundColor);\n        let stop = hexToRgb(globalThis.gyre.paletteValues.backgroundColor);\n        value = `10:${start}\n            90:${stop}`;\n        $toollayer.value = value;\n    }\n\n\n    export function refresh() {\n        value = $toollayer.value;\n    }\n\n\n    export let editcoord\n\n\n</script>\n\n<div class=\"show\" style=\"display: inline-flex;\">\n\n    <div style=\"display:flex;align-items: center\">\n        <!-- svelte-ignore a11y-click-events-have-key-events -->\n        <fds-image-editor-button type=\"button\"\n                                 on:click={() => { editcoord=!editcoord; $toollayer.editcoord =  editcoord ; change('editcoord',editcoord); }}>\n            Parameters\n        </fds-image-editor-button>\n        <fds-image-editor-button type=\"button\" on:click={() => { $toollayer.done = true; }}>Done\n        </fds-image-editor-button>\n        <fds-image-editor-button type=\"button\" on:click={() => { $toollayer.cancel = true; }}>Cancel\n        </fds-image-editor-button>\n\n    </div>\n\n\n    {#if editcoord  }\n        <div class=\"editcoord\">\n            <div class=\"formLine\">\n                <fds-gradient-editor value=\"{value}\" on:change={(ev) => { changeList(ev.detail) }}\n                                     id=\"gradientList\"></fds-gradient-editor>\n            </div>\n            <div class=\"formLine\">\n                <div style=\"display:flex;align-items: center\">\n                    <fds-image-editor-button type=\"button\" on:click={() => { resetLine() }}>Reset Line\n                    </fds-image-editor-button>\n\n                </div>\n            </div>\n        </div>\n    {/if}\n</div>\n\n<style>\n    * {\n        box-sizing: border-box;\n    }\n\n    .buttoncontainer {\n        margin-top: 10px;\n        margin-bottom: 10px;\n        padding-bottom: 5px;;\n        border-bottom: 1px solid white;\n    }\n\n    button {\n        color: white;\n        background-color: transparent;\n    }\n\n    .editcoord {\n        min-width: 330px;\n        min-height: 100px;\n        box-shadow: 0 0 1rem 0 rgba(255, 255, 255, .2);\n        border-radius: 8px;\n        background-color: rgba(0, 0, 0, .65);\n        backdrop-filter: blur(10px);\n        color: rgba(255, 255, 255, 0.6);\n        position: absolute;\n        left: 0px;\n        top: 50px;\n        padding: 14px;\n        font-family: \"Segoe UI\", Roboto, system-ui;\n        z-index: 2000;\n    }\n\n    .formLine {\n        displaY: block;\n        margin-bottom: 20px;\n    }\n\n    .slider {\n        vertical-align: middle;\n    }\n\n    .values3 {\n        width: 30px;\n        text-align: right;\n        display: inline-block;\n    }\n\n    .formInput {\n        width: 100%;\n        outline: 0;\n        border: 0;\n        border-bottom: 2px solid rgba(255, 255, 255, 0.2);\n        padding: 5px;\n        font-size: 14px;\n        font-weight: normal;\n        border-radius: 3px;\n        color: rgba(255, 255, 255, 0.9);\n        margin-bottom: 10px;\n        display: block;\n        background: none;\n        font-family: system-ui, \"Segoe UI\", Roboto;\n\n    }\n\n    .formInput::placeholder {\n        font-weight: normal;\n        opacity: 0.5;\n        color: rgba(255, 255, 255, 0.7);\n    }\n\n    .formLine {\n        margin-bottom: 5px;\n    }\n\n    .dropdown {\n        position: relative;\n        display: inline-block;\n    }\n\n    .dropdown-content {\n        display: none;\n        position: absolute;\n        background-color: #f1f1f1;\n        min-width: 160px;\n        overflow: auto;\n        box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);\n        z-index: 1;\n        max-height: calc(100vh / 2);\n        margin-top: 5px;\n        border-radius: 6px;\n    }\n\n    .dropdown-content a {\n        color: black;\n        padding: 12px 16px;\n        text-decoration: none;\n        display: block;\n        font-size: 20px;\n    }\n\n    .dropdown a:hover {\n        background-color: #ddd;\n    }\n\n    .show {\n        display: block;\n    }\n\n    .font-preview {\n        display: inline-block;\n        width: 200px;\n        color: black;\n        background-color: white;\n        font-size: 20px;\n        padding: 16px;\n        border: none;\n        cursor: pointer;\n        border-radius: 6px;\n    }\n\n</style>","<svelte:options tag=\"fds-image-editor-gradient\"></svelte:options>\n<script>\n  import { onMount, onDestroy,createEventDispatcher } from 'svelte';\n  import {get_current_component} from 'svelte/internal'\n\n\n  import {toollayer as toolback} from \"./stores\";\n  let toollayer\n  if(globalThis.gyre && globalThis.gyre.paletteValues.tools){\n    toollayer = globalThis.gyre.paletteValues.tools.fdsimageeditorgradient;\n  }  else {\n    toollayer =toolback;\n  }\n\n  export let opacity;\n  if (globalThis.gyre && globalThis.gyre.paletteValues.selectedLayer) opacity = globalThis.gyre.paletteValues.selectedLayer.opacity;\n  import Dialog from \"./Dialog.svelte\";\n  //let host = get_current_component()\n  let host = get_current_component().$$.root.host\n  let svgEl; // Reference to the SVG element\n  let line = {      x1: 0, y1: 0,      x2: 10,      y2: 10    }\n  export let value\n  let layer={width:512,height:512}\n  let zoom;\n  if(globalThis.gyre){\n    zoom = globalThis.gyre.canvas.zoom || 100;\n  }\n  let lastZoom=zoom;\n  export  let ratio = window.devicePixelRatio;\n  let p = parseFloat(zoom) / 100 / ratio;\n  let noscaleline = {};\n\n\n  let draggingPoint = null\n  let draggingIndex = null\n  let lasteditcoord;\n  if (globalThis.gyre){\n    setLayer()\n  }\n\n\n\n\n\n\n  // List of points along the line, each with a percentage and a color\n  let points = [ ];\n  let start_fill_color = \"white\"\n  let end_fill_color = \"white\"\n\n  let oldline;\n  let oldpoints;\n  let oldwidth\n  let oldheight\n\n function setLayer(){\n   layer={width:globalThis.gyre.canvas.width*p,height:globalThis.gyre.canvas.height*p}\n }\n\n  export function resetLine() {\n    line.x1=layer.width*0.1\n    line.y1=layer.height*0.1\n    line.x2=layer.width*0.9\n    line.y2=layer.height*0.9\n    setValues();\n  }\n\n  function createNoScaleLine(){\n    for (const key in line) {\n      if (line.hasOwnProperty(key)) {\n        noscaleline[key] = line[key] / p;\n      }\n    }\n  }\n\n  function reCalc(num) {\n    let newCoord = num / p;\n    return newCoord\n  }\n\n\n  function value_to_internal(input) {\n    points=[]\n    let lines = input.trim().split('\\n');\n    // Parse each line\n    lines.forEach(line => {\n      let [percentageStr, colorStr] = line.split(':');\n      let percentage = parseFloat(percentageStr) / 100; // Convert to decimal\n      let rgbValues = colorStr.split(',').map(Number);\n      let hexColor = '#' + rgbValues.map(c => c.toString(16).padStart(2, '0')).join('').toUpperCase();\n\n      points.push({ percentage, color: hexColor });\n    });\n\n    // Sort points by percentage\n    points.sort((a, b) => a.percentage - b.percentage);\n\n    // Set start_fill_color\n    let zeroEntry = points.find(point => point.percentage === 0);\n    if (zeroEntry) {\n      start_fill_color = zeroEntry.color;\n    } else {\n      start_fill_color = points[0].color;\n    }\n\n    // Set end_fill_color\n    let hundredEntry = points.find(point => point.percentage === 1);\n    if (hundredEntry) {\n      end_fill_color = hundredEntry.color;\n    } else {\n      end_fill_color = points[points.length - 1].color;\n    }\n\n  }\n\n  function internal_to_value() {\n    // Include start_fill_color at percentage 0.0 if not present\n    // let hasStartColor = points.some(point => point.percentage === 0.0);\n    //  if (!hasStartColor && start_fill_color) {\n    //  points.push({ percentage: 0.0, color: start_fill_color });\n    //  }\n\n    // Include end_fill_color at percentage 1.0 if not present\n    //    let hasEndColor = points.some(point => point.percentage === 1.0);\n    //  if (!hasEndColor && end_fill_color) {\n    //   points.push({ percentage: 1.0, color: end_fill_color });\n    //  }\n\n    // Sort points by percentage\n    points.sort((a, b) => a.percentage - b.percentage);\n\n    // Function to convert hex color to RGB values\n    function hexToRgb(hex) {\n      // Remove '#' if present\n      hex = hex.replace('#', '');\n\n      // Handle shorthand hex colors (#F00)\n      if (hex.length === 3) {\n        hex = hex.split('').map(h => h + h).join('');\n      }\n\n      let bigint = parseInt(hex, 16);\n      let r = (bigint >> 16) & 255;\n      let g = (bigint >> 8) & 255;\n      let b = bigint & 255;\n\n      return `${r},${g},${b}`;\n    }\n\n    // Convert to the string format\n    let outputLines = points.map(point => {\n      let percentageInt =  point.percentage * 100;\n      let color = point.color;\n\n      // Check if the color is a hex code\n      if (typeof color === 'string' && color.startsWith('#')) {\n        color = hexToRgb(color);\n      }\n\n      return `${percentageInt}:${color}`;\n    });\n\n    // Join lines into a single string\n    let outputString = outputLines.join('\\n');\n    return outputString\n  }\n\n  function recreateLineScaled(){\n    if(noscaleline.x1 != void 0 && noscaleline.x2 != void 0 ){\n      setTimeout(() => {\n        let tmpline = {...noscaleline}\n        Object.keys(tmpline).forEach(key => {\n          tmpline[key] = tmpline[key] * p;\n        });\n        line = {...tmpline}\n        setValues();\n      }, 100);\n\n     }\n  }\n\n  $: if($toollayer){\n    refresh();\n  }\n\n  export function refresh(){\n    if(globalThis.gyre){ zoom = globalThis.gyre.canvas.zoom || 100; }\n    p = parseFloat(zoom) / 100 / ratio;\n    setLayer();\n    if (globalThis.gyre && globalThis.gyre.paletteValues.selectedLayer) opacity = globalThis.gyre.paletteValues.selectedLayer.opacity;\n    if($toollayer.value) value = $toollayer.value;\n    if($toollayer.resetLine){\n      console.log('reset line');\n      resetLine();\n      $toollayer.resetLine = false;\n    }\n    if($toollayer.done){\n      console.log('done');\n      $toollayer.done = false;\n      convertCanvasToImage();\n    }\n    if($toollayer.cancel){\n      console.log('cancel');\n      host.dispatchEvent(new CustomEvent('change', {detail:{'type':'cancelimagegenerate'}}))\n      $toollayer.cancel = false;\n    }\n    if($toollayer.editcoord!==lasteditcoord){\n      host.dispatchEvent(new CustomEvent('change', {detail:{'type':'editcoord','value':$toollayer.editcoord}}))\n      lasteditcoord = $toollayer.editcoord;\n    }\n\n\n  }\n\n\n  $: if (value) {\n    value_to_internal(value)\n    calculatePointPositions();\n    refresh();\n  }\n\n\n  $: if (layer && !line.x1) {\n    resetLine()\n  }\n\n  $: if(lastZoom && lastZoom!=zoom){\n    recreateLineScaled();\n    lastZoom = zoom;\n  }\n\n\n  function startDrag(point, index = null) {\n    draggingPoint = point;\n    draggingIndex = index;\n  }\n\n  function stopDrag() {\n    draggingPoint = null;\n    draggingIndex = null;\n  }\n\n  function drag(event) {\n    if (!draggingPoint) return;\n\n    // Calculate coordinates relative to SVG element\n    const svgBounds = svgEl.getBoundingClientRect();\n    const offsetX = event.clientX - svgBounds.left;\n    const offsetY = event.clientY - svgBounds.top;\n\n    if (draggingPoint === 'x1') {\n      line.x1 = offsetX;\n      line.y1 = offsetY;\n      calculatePointPositions();\n    } else if (draggingPoint === 'x2') {\n      line.x2 = offsetX;\n      line.y2 = offsetY;\n      calculatePointPositions();\n    } else if (draggingPoint === 'middlePoint') {\n      // Adjust only the specific point being dragged\n      const dx = line.x2 - line.x1;\n      const dy = line.y2 - line.y1;\n      const length = Math.sqrt(dx * dx + dy * dy);\n      const t = ((offsetX - line.x1) * dx + (offsetY - line.y1) * dy) / (length * length);\n      points[draggingIndex].percentage = Math.max(0, Math.min(1, t)); // Keep percentage between 0 and 1\n    }\n\n    setValues();\n  }\n\n\n\n  function setValues(){\n    createNoScaleLine();\n    // Recalculate positions for each point\n    calculatePointPositions();\n    value=internal_to_value();\n    $toollayer.value = value;\n    host.dispatchEvent(new CustomEvent('change', {detail:{'type':'coordinates',value}}))\n  }\n\n\n\n  function calculatePointPositions() {\n    points.forEach((point) => {\n      point.x = line.x1 + point.percentage * (line.x2 - line.x1);\n      point.y = line.y1 + point.percentage * (line.y2 - line.y1);\n    });\n    drawGradientLine()\n    points = points; // Trigger reactivity\n  }\n\n  // Initial calculation of points' positions\n  // calculatePointPositions();\n\n  onMount(() => {\n    window.addEventListener('mousemove', drag);\n    window.addEventListener('mouseup', stopDrag);\n    if (value) {\n      calculatePointPositions()\n    }\n  });\n\n  onDestroy(() => {\n    window.removeEventListener('mousemove', drag);\n    window.removeEventListener('mouseup', stopDrag);\n  });\n\n  //  let gradientDiv=null\n  let canvas=null\n\n\n\n  function drawGradientLine(ignoreclientSize) {\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n\n    // Ensure the canvas is sized correctly\n    if(ignoreclientSize){\n      canvas.width =  canvas.width;\n      canvas.height =  canvas.height;\n    } else {\n      canvas.width = canvas.clientWidth || canvas.width;\n      canvas.height = canvas.clientHeight || canvas.height;\n    }\n\n    // Check for zero dimensions\n    if (canvas.width === 0 || canvas.height === 0) {\n      console.error('Canvas dimensions are zero. Please set canvas width and height.');\n      return;\n    }\n\n    // Calculate the angle of the line\n    const angleRad = Math.atan2(line.y2 - line.y1, line.x2 - line.x1);\n\n    // Calculate the length of the gradient line (long enough to cover the canvas diagonally)\n    const canvasDiagonal = Math.sqrt(canvas.width ** 2 + canvas.height ** 2);\n\n    // Calculate gradient start and end points\n    const gradientStartX = line.x1 - canvasDiagonal * Math.cos(angleRad);\n    const gradientStartY = line.y1 - canvasDiagonal * Math.sin(angleRad);\n    const gradientEndX = line.x2 + canvasDiagonal * Math.cos(angleRad);\n    const gradientEndY = line.y2 + canvasDiagonal * Math.sin(angleRad);\n\n    // Create gradient\n    const gradient = ctx.createLinearGradient(gradientStartX, gradientStartY, gradientEndX, gradientEndY);\n\n    // Add start color stop\n    gradient.addColorStop(0, start_fill_color);\n\n    // Calculate total length of the line for percentage calculations\n//    const lineLength = Math.hypot(line.x2 - line.x1, line.y2 - line.y1);\n\n    // Add intermediate color stops\n    points.forEach(point => {\n      // Position along the line\n      const pointX = line.x1 + (line.x2 - line.x1) * point.percentage;\n      const pointY = line.y1 + (line.y2 - line.y1) * point.percentage;\n\n      // Calculate distance from gradient start point\n      const distanceFromGradientStart = Math.hypot(pointX - gradientStartX, pointY - gradientStartY);\n      const gradientLength = Math.hypot(gradientEndX - gradientStartX, gradientEndY - gradientStartY);\n\n      // Calculate the gradient stop percentage\n      const gradientPercentage = distanceFromGradientStart / gradientLength;\n\n      gradient.addColorStop(gradientPercentage, point.color);\n    });\n\n    // Add end color stop\n    gradient.addColorStop(1, end_fill_color);\n\n    // Set fill style and fill the entire canvas\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n  }\n\n  function undoAdd() {\n    if (!globalThis.gyre) return;\n    let urlAfter = canvas.toDataURL(\"image/png\");\n    let urlBefore =  globalThis.gyre.paletteValues.selectedLayer.url;\n\n    globalThis.gyre.undo_redo_add('gradient', 'imagegenerated', { urlBefore, urlAfter }, (state, action) => {\n      let backup\n      if (action === 'undo') backup  = state.data.urlBefore\n      if (action === 'redo') backup  = state.data.urlAfter;\n\n      globalThis.gyre.paletteValues.selectedLayer.url = backup\n\n      if(globalThis.gyre.paletteValues.selectedLayer && globalThis.gyre.paletteValues.selectedLayer._refreshCallback){\n        globalThis.gyre.paletteValues.selectedLayer._refreshCallback();\n      }\n\n    })\n  }\n\n\n  function convertCanvasToImage() {\n    recalculateNoZoomCoordinates();\n    // Get the data URL of the canvas\n    const dataURL = canvas.toDataURL(\"image/png\");\n    setBackCoordinates();\n    undoAdd();\n    host.dispatchEvent(new CustomEvent('change', {detail: {'type':'imagegenerated','dataURL':dataURL}}));\n\n  }\n\n  function  recalculateNoZoomCoordinates(){\n    oldline =  {...line}\n    line =  {      x1: reCalc(line.x1), y1: reCalc(line.y1), x2: reCalc(line.x2),y2: reCalc(line.y2)}\n    oldpoints =  JSON.parse(JSON.stringify(points));\n    points = points.map((el)=>{\n      el.x = reCalc(el.x);\n      el.y = reCalc(el.y);\n      return el;\n    });\n    oldwidth =  canvas.width;\n    oldheight =  canvas.height;\n    canvas.width =  reCalc(canvas.width);\n    canvas.height =  reCalc(canvas.height);\n    drawGradientLine('ignoreclientSize');\n  }\n\n\n  function setBackCoordinates(){\n    canvas.width = oldwidth;\n    canvas.height = oldheight\n    line = oldline;\n    points = oldpoints;\n    drawGradientLine();\n  }\n\n\n\n</script>\n<div style=\"width:{layer.width}px;height:{layer.height}px;position:relative\">\n  <canvas style=\"position:absolute;width:{layer.width}px;height:{layer.height}px;z-index:-10;opacity:{(opacity/100)};\" bind:this={canvas}></canvas>\n  <svg bind:this={svgEl} width={layer.width} height={layer.height}>\n    <!-- Draw the line -->\n    <line\n            x1={line.x1}\n            y1={line.y1}\n            x2={line.x2}\n            y2={line.y2}\n            stroke=\"black\"\n            stroke-width=\"2\"\n    />\n\n    <!-- Start point -->\n    <circle\n            cx={line.x1}\n            cy={line.y1}\n            r=\"8\"\n            fill=\"white\"\n            stroke=\"black\"\n            stroke-width=\"2\"\n            on:mousedown={() => startDrag('x1')}\n            on:mouseup={stopDrag}\n    />\n\n    <!-- End point -->\n\n\n\n    <circle\n            cx={line.x2}\n            cy={line.y2}\n            r=\"8\"\n            fill=\"white\"\n            stroke=\"black\"\n            stroke-width=\"2\"\n            on:mousedown={() => startDrag('x2')}\n            on:mouseup={stopDrag}\n    />\n\n\n\n\n    <!-- Additional points along the line -->\n    {#each points as { percentage, color, x, y }, index}\n\n\n      <circle\n              cx={x}\n              cy={y}\n              r=\"6\"\n              fill={color}\n              stroke=\"white\"\n              stroke-width=\"2\"\n              on:mousedown={() => startDrag('middlePoint', index)}\n              on:mouseup={stopDrag}\n      />\n\n      <circle\n              cx={x}\n              cy={y}\n              r=\"8\"\n              fill=\"none\"\n              stroke=\"black\"\n              stroke-width=\"2\"\n              on:mousedown={() => startDrag('middlePoint', index)}\n              on:mouseup={stopDrag}\n      />\n\n\n\n    {/each}\n  </svg>\n</div>\n\n<style>\n  circle {\n    cursor: pointer;\n  }\n</style>\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","subscribe","store","callbacks","unsub","unsubscribe","set_store_value","ret","value","set","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","svg_element","createElementNS","space","data","createTextNode","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_custom_element_data","prop","set_style","key","important","style","removeProperty","setProperty","attribute_to_object","attributes","result","current_component","set_current_component","component","get_current_component","Error","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","length","update","$$","e","pop","i","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","destroy_component","detaching","filtered","targets","c","indexOf","flush_render_callbacks","on_destroy","d","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_mount","on_disconnect","context","Map","skip_bound","root","ready","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","block","delete","local","customElement","m","new_on_destroy","map","filter","mount_component","SvelteElement","HTMLElement","constructor","super","this","attachShadow","mode","connectedCallback","slotted","attributeChangedCallback","_oldValue","newValue","disconnectedCallback","$destroy","$on","type","index","splice","$set","$$props","obj","$$set","keys","subscriber_queue","toollayer","start","stop","subscribers","new_value","run_queue","subscriber","invalidate","size","writable","div3","div0","fds_gradient_editor","div2","div1","fds_image_editor_button","create_if_block","fds_image_editor_button0","fds_image_editor_button1","fds_image_editor_button2","hexToRgb","hex","replace","split","char","join","parseInt","substring","globalThis","gyre","paletteValues","tools","fdsimageeditorgradient","$$subscribe_toollayer","toolback","host","toolinst","change","dispatchEvent","CustomEvent","detail","changeList","$toollayer","resetLine","foregroundColor","backgroundColor","refresh","editcoord","$$invalidate","done","cancel","ev","circle0","circle1","canvas_1","width","height","line_1","line_1_x__value","x1","line_1_y__value","y1","line_1_x__value_1","x2","line_1_y__value_1","y2","circle0_cx_value","circle0_cy_value","circle1_cx_value","circle1_cy_value","svg","svg_width_value","svg_height_value","div","iterations","opacity","selectedLayer","svgEl","zoom","line","layer","canvas","lasteditcoord","lastZoom","ratio","window","devicePixelRatio","parseFloat","noscaleline","draggingPoint","draggingIndex","setLayer","oldline","oldpoints","oldwidth","oldheight","points","start_fill_color","end_fill_color","setValues","reCalc","num","internal_to_value","sort","percentage","point","percentageInt","color","startsWith","h","bigint","JSON","parse","stringify","el","x","y","drawGradientLine","dataURL","toDataURL","urlAfter","urlBefore","url","undo_redo_add","state","action","backup","_refreshCallback","undoAdd","convertCanvasToImage","startDrag","stopDrag","drag","svgBounds","getBoundingClientRect","offsetX","clientX","left","offsetY","clientY","top","calculatePointPositions","dx","dy","Math","sqrt","t","max","min","hasOwnProperty","createNoScaleLine","onDestroy","ignoreclientSize","getContext","clientWidth","clientHeight","angleRad","atan2","canvasDiagonal","gradientStartX","cos","gradientStartY","sin","gradientEndX","gradientEndY","gradient","createLinearGradient","addColorStop","pointX","pointY","gradientPercentage","hypot","fillStyle","fillRect","input","trim","percentageStr","colorStr","hexColor","Number","toString","padStart","toUpperCase","zeroEntry","find","hundredEntry","value_to_internal","setTimeout","tmpline","$$value"],"mappings":"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"}